name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  HASKELL_VERSION: '9.2'
  CABAL_VERSION: '3.8'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: juspay_user
          POSTGRES_DB: juspay_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Haskell
      uses: haskell/actions/setup@v2
      with:
        ghc-version: ${{ env.HASKELL_VERSION }}
        cabal-version: ${{ env.CABAL_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cabal/packages
          ~/.cabal/store
          dist-newstyle
        key: ${{ runner.os }}-cabal-${{ hashFiles('**/*.cabal', '**/cabal.project') }}
        restore-keys: |
          ${{ runner.os }}-cabal-

    - name: Install dependencies
      run: |
        cabal update
        cabal build --dependencies-only --enable-tests

    - name: Build
      run: cabal build --enable-tests

    - name: Run tests
      env:
        POSTGRES_URL: postgresql://juspay_user:password@localhost:5432/juspay_test
        REDIS_URL: redis://localhost:6379
        KAFKA_BOOTSTRAP: localhost:9092
        INSTAMOJO_API_KEY: test_key
        INSTAMOJO_AUTH_TOKEN: test_token
        INSTAMOJO_BASE_URL: https://test.instamojo.com
      run: cabal test --test-show-details=streaming

    - name: Run linter
      run: |
        cabal install hlint
        hlint src/ app/ test/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan.sarif'
      continue-on-error: true

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # In a real setup, this would deploy to your staging environment
        # using tools like kubectl, terraform, or cloud-specific actions

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run load tests
      run: |
        echo "Running performance tests..."
        # In a real setup, this would run load tests using tools like
        # Artillery, JMeter, or custom performance test suite

  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.test.result == 'success'
      run: |
        echo "✅ All tests passed! Ready for deployment."
        
    - name: Notify on failure
      if: needs.test.result == 'failure'
      run: |
        echo "❌ Tests failed! Please check the logs."
